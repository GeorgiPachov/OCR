package com.fmitextrecognition.io;


import java.io.IOException;

import org.junit.Test;

import com.fmitextrecognition.filters.BinarizationFilter;
import com.fmitextrecognition.filters.GreyscaleFilter;

public class AllTests {

	private Bitmap bitmap;
	
	private void setUp() throws IOException{
		ConstantsAndThresholds.TEST_WRITE_FILE.delete();
		this.bitmap = BitmapUtils.readImage(ConstantsAndThresholds.testFile);
	}
	
	private void tearDown(){
		ConstantsAndThresholds.TEST_WRITE_FILE.delete();
	}
	
	@Test
	public void testImageIO() throws Exception {
		setUp();
		
		asserting(bitmap.getHeight() > 0);
		asserting(bitmap.getWidth() > 0);
		asserting(bitmap.cloneMatrix().length != 0);
		
		
		asserting(!ConstantsAndThresholds.TEST_WRITE_FILE.exists());
		BitmapUtils.saveToFile(bitmap, ConstantsAndThresholds.TEST_WRITE_FILE);
		asserting(ConstantsAndThresholds.TEST_WRITE_FILE.exists());
		
		tearDown();
	}

	@Test
	public void testGreyscaleFilter() throws IOException {
		setUp();
		
		int[][] greyscaleMatrix = new GreyscaleFilter().filter(bitmap).cloneMatrix();
		for (int x = 0; x < greyscaleMatrix.length; x++){
			for (int y = 0; y < greyscaleMatrix[0].length; y++){
				int greyscaledPixelColor = greyscaleMatrix[x][y];
				int red = BitmapUtils.getRed(greyscaledPixelColor);
				int blue = BitmapUtils.getBlue(greyscaledPixelColor);
				int green = BitmapUtils.getGreen(greyscaledPixelColor);
				asserting(red == green && green == blue);
			}
		}
		
		tearDown();
	}

	@Test
	public void testBinarizationFilter() throws IOException {
		setUp();
		
		int[][] binariziedMatrix = new BinarizationFilter().filter(bitmap).cloneMatrix();
		for (int x = 0; x < binariziedMatrix.length; x++){
			for (int y = 0; y < binariziedMatrix[0].length; y++){
				int greyscaledPixelColor = binariziedMatrix[x][y];
				int red = BitmapUtils.getRed(greyscaledPixelColor);
				asserting(red == 0 || red == 255);
			}
		}
		
		tearDown();
	}

	public static boolean isWindows() {
		return System.getProperty("os.name").toLowerCase().trim().contains("windows");
	}

	private static void asserting(boolean condition) {
		if (!condition) {
			throw new AssertionError();
		}
	}

}
